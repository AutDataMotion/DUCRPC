// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `wisefuseRpc.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package RPCWiseFuse;

/**
 * Provides type-specific helper functions.
 **/
public final class WiseFusionInfPrxHelper extends Ice.ObjectPrxHelperBase implements WiseFusionInfPrx
{
    private static final String __askProcess_name = "askProcess";

    public String askProcess(java.util.Map<java.lang.String, java.lang.String> mapArgs)
    {
        return askProcess(mapArgs, null, false);
    }

    public String askProcess(java.util.Map<java.lang.String, java.lang.String> mapArgs, java.util.Map<String, String> __ctx)
    {
        return askProcess(mapArgs, __ctx, true);
    }

    private String askProcess(java.util.Map<java.lang.String, java.lang.String> mapArgs, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__askProcess_name);
        return end_askProcess(begin_askProcess(mapArgs, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_askProcess(java.util.Map<java.lang.String, java.lang.String> mapArgs)
    {
        return begin_askProcess(mapArgs, null, false, false, null);
    }

    public Ice.AsyncResult begin_askProcess(java.util.Map<java.lang.String, java.lang.String> mapArgs, java.util.Map<String, String> __ctx)
    {
        return begin_askProcess(mapArgs, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_askProcess(java.util.Map<java.lang.String, java.lang.String> mapArgs, Ice.Callback __cb)
    {
        return begin_askProcess(mapArgs, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_askProcess(java.util.Map<java.lang.String, java.lang.String> mapArgs, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_askProcess(mapArgs, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_askProcess(java.util.Map<java.lang.String, java.lang.String> mapArgs, Callback_WiseFusionInf_askProcess __cb)
    {
        return begin_askProcess(mapArgs, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_askProcess(java.util.Map<java.lang.String, java.lang.String> mapArgs, java.util.Map<String, String> __ctx, Callback_WiseFusionInf_askProcess __cb)
    {
        return begin_askProcess(mapArgs, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_askProcess(java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                            IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_askProcess(mapArgs, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_askProcess(java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                            IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_askProcess(mapArgs, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_askProcess(java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_askProcess(mapArgs, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_askProcess(java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_askProcess(mapArgs, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_askProcess(java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_askProcess(mapArgs, __ctx, __explicitCtx, __synchronous, 
                                new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                    {
                                        public final void __completed(Ice.AsyncResult __result)
                                        {
                                            WiseFusionInfPrxHelper.__askProcess_completed(this, __result);
                                        }
                                    });
    }

    private Ice.AsyncResult begin_askProcess(java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__askProcess_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__askProcess_name, __cb);
        try
        {
            __result.prepare(__askProcess_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            DirArgsHelper.write(__os, mapArgs);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_askProcess(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __askProcess_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __askProcess_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        RPCWiseFuse.WiseFusionInfPrx __proxy = (RPCWiseFuse.WiseFusionInfPrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_askProcess(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __fetchFuseRes_name = "fetchFuseRes";

    public FusionInf fetchFuseRes(java.util.Map<java.lang.String, java.lang.String> mapArg)
    {
        return fetchFuseRes(mapArg, null, false);
    }

    public FusionInf fetchFuseRes(java.util.Map<java.lang.String, java.lang.String> mapArg, java.util.Map<String, String> __ctx)
    {
        return fetchFuseRes(mapArg, __ctx, true);
    }

    private FusionInf fetchFuseRes(java.util.Map<java.lang.String, java.lang.String> mapArg, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__fetchFuseRes_name);
        return end_fetchFuseRes(begin_fetchFuseRes(mapArg, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_fetchFuseRes(java.util.Map<java.lang.String, java.lang.String> mapArg)
    {
        return begin_fetchFuseRes(mapArg, null, false, false, null);
    }

    public Ice.AsyncResult begin_fetchFuseRes(java.util.Map<java.lang.String, java.lang.String> mapArg, java.util.Map<String, String> __ctx)
    {
        return begin_fetchFuseRes(mapArg, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_fetchFuseRes(java.util.Map<java.lang.String, java.lang.String> mapArg, Ice.Callback __cb)
    {
        return begin_fetchFuseRes(mapArg, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_fetchFuseRes(java.util.Map<java.lang.String, java.lang.String> mapArg, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_fetchFuseRes(mapArg, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_fetchFuseRes(java.util.Map<java.lang.String, java.lang.String> mapArg, Callback_WiseFusionInf_fetchFuseRes __cb)
    {
        return begin_fetchFuseRes(mapArg, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_fetchFuseRes(java.util.Map<java.lang.String, java.lang.String> mapArg, java.util.Map<String, String> __ctx, Callback_WiseFusionInf_fetchFuseRes __cb)
    {
        return begin_fetchFuseRes(mapArg, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_fetchFuseRes(java.util.Map<java.lang.String, java.lang.String> mapArg, 
                                              IceInternal.Functional_GenericCallback1<FusionInf> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_fetchFuseRes(mapArg, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_fetchFuseRes(java.util.Map<java.lang.String, java.lang.String> mapArg, 
                                              IceInternal.Functional_GenericCallback1<FusionInf> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_fetchFuseRes(mapArg, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_fetchFuseRes(java.util.Map<java.lang.String, java.lang.String> mapArg, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_GenericCallback1<FusionInf> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_fetchFuseRes(mapArg, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_fetchFuseRes(java.util.Map<java.lang.String, java.lang.String> mapArg, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_GenericCallback1<FusionInf> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_fetchFuseRes(mapArg, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_fetchFuseRes(java.util.Map<java.lang.String, java.lang.String> mapArg, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.Functional_GenericCallback1<FusionInf> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_fetchFuseRes(mapArg, __ctx, __explicitCtx, __synchronous, 
                                  new IceInternal.Functional_TwowayCallbackArg1<RPCWiseFuse.FusionInf>(__responseCb, __exceptionCb, __sentCb)
                                      {
                                          public final void __completed(Ice.AsyncResult __result)
                                          {
                                              WiseFusionInfPrxHelper.__fetchFuseRes_completed(this, __result);
                                          }
                                      });
    }

    private Ice.AsyncResult begin_fetchFuseRes(java.util.Map<java.lang.String, java.lang.String> mapArg, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__fetchFuseRes_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__fetchFuseRes_name, __cb);
        try
        {
            __result.prepare(__fetchFuseRes_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            DirArgsHelper.write(__os, mapArg);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public FusionInf end_fetchFuseRes(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __fetchFuseRes_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            FusionInf __ret = null;
            __ret = FusionInf.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __fetchFuseRes_completed(Ice.TwowayCallbackArg1<FusionInf> __cb, Ice.AsyncResult __result)
    {
        RPCWiseFuse.WiseFusionInfPrx __proxy = (RPCWiseFuse.WiseFusionInfPrx)__result.getProxy();
        FusionInf __ret = null;
        try
        {
            __ret = __proxy.end_fetchFuseRes(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __fuseAsyn_name = "fuseAsyn";

    public int fuseAsyn(java.util.Map<java.lang.String, java.lang.String> mapArgs)
    {
        return fuseAsyn(mapArgs, null, false);
    }

    public int fuseAsyn(java.util.Map<java.lang.String, java.lang.String> mapArgs, java.util.Map<String, String> __ctx)
    {
        return fuseAsyn(mapArgs, __ctx, true);
    }

    private int fuseAsyn(java.util.Map<java.lang.String, java.lang.String> mapArgs, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__fuseAsyn_name);
        return end_fuseAsyn(begin_fuseAsyn(mapArgs, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_fuseAsyn(java.util.Map<java.lang.String, java.lang.String> mapArgs)
    {
        return begin_fuseAsyn(mapArgs, null, false, false, null);
    }

    public Ice.AsyncResult begin_fuseAsyn(java.util.Map<java.lang.String, java.lang.String> mapArgs, java.util.Map<String, String> __ctx)
    {
        return begin_fuseAsyn(mapArgs, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_fuseAsyn(java.util.Map<java.lang.String, java.lang.String> mapArgs, Ice.Callback __cb)
    {
        return begin_fuseAsyn(mapArgs, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_fuseAsyn(java.util.Map<java.lang.String, java.lang.String> mapArgs, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_fuseAsyn(mapArgs, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_fuseAsyn(java.util.Map<java.lang.String, java.lang.String> mapArgs, Callback_WiseFusionInf_fuseAsyn __cb)
    {
        return begin_fuseAsyn(mapArgs, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_fuseAsyn(java.util.Map<java.lang.String, java.lang.String> mapArgs, java.util.Map<String, String> __ctx, Callback_WiseFusionInf_fuseAsyn __cb)
    {
        return begin_fuseAsyn(mapArgs, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_fuseAsyn(java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                          IceInternal.Functional_IntCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_fuseAsyn(mapArgs, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_fuseAsyn(java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                          IceInternal.Functional_IntCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_fuseAsyn(mapArgs, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_fuseAsyn(java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_IntCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_fuseAsyn(mapArgs, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_fuseAsyn(java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_IntCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_fuseAsyn(mapArgs, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_fuseAsyn(java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                           java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.Functional_IntCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_fuseAsyn(mapArgs, __ctx, __explicitCtx, __synchronous, 
                              new IceInternal.Functional_TwowayCallbackInt(__responseCb, __exceptionCb, __sentCb)
                                  {
                                      public final void __completed(Ice.AsyncResult __result)
                                      {
                                          WiseFusionInfPrxHelper.__fuseAsyn_completed(this, __result);
                                      }
                                  });
    }

    private Ice.AsyncResult begin_fuseAsyn(java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                           java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__fuseAsyn_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__fuseAsyn_name, __cb);
        try
        {
            __result.prepare(__fuseAsyn_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            DirArgsHelper.write(__os, mapArgs);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public int end_fuseAsyn(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __fuseAsyn_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __fuseAsyn_completed(Ice.TwowayCallbackInt __cb, Ice.AsyncResult __result)
    {
        RPCWiseFuse.WiseFusionInfPrx __proxy = (RPCWiseFuse.WiseFusionInfPrx)__result.getProxy();
        int __ret = 0;
        try
        {
            __ret = __proxy.end_fuseAsyn(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __fuseSyn_name = "fuseSyn";

    public FusionInf fuseSyn(java.util.Map<java.lang.String, java.lang.String> mapArgs)
    {
        return fuseSyn(mapArgs, null, false);
    }

    public FusionInf fuseSyn(java.util.Map<java.lang.String, java.lang.String> mapArgs, java.util.Map<String, String> __ctx)
    {
        return fuseSyn(mapArgs, __ctx, true);
    }

    private FusionInf fuseSyn(java.util.Map<java.lang.String, java.lang.String> mapArgs, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__fuseSyn_name);
        return end_fuseSyn(begin_fuseSyn(mapArgs, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_fuseSyn(java.util.Map<java.lang.String, java.lang.String> mapArgs)
    {
        return begin_fuseSyn(mapArgs, null, false, false, null);
    }

    public Ice.AsyncResult begin_fuseSyn(java.util.Map<java.lang.String, java.lang.String> mapArgs, java.util.Map<String, String> __ctx)
    {
        return begin_fuseSyn(mapArgs, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_fuseSyn(java.util.Map<java.lang.String, java.lang.String> mapArgs, Ice.Callback __cb)
    {
        return begin_fuseSyn(mapArgs, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_fuseSyn(java.util.Map<java.lang.String, java.lang.String> mapArgs, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_fuseSyn(mapArgs, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_fuseSyn(java.util.Map<java.lang.String, java.lang.String> mapArgs, Callback_WiseFusionInf_fuseSyn __cb)
    {
        return begin_fuseSyn(mapArgs, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_fuseSyn(java.util.Map<java.lang.String, java.lang.String> mapArgs, java.util.Map<String, String> __ctx, Callback_WiseFusionInf_fuseSyn __cb)
    {
        return begin_fuseSyn(mapArgs, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_fuseSyn(java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                         IceInternal.Functional_GenericCallback1<FusionInf> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_fuseSyn(mapArgs, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_fuseSyn(java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                         IceInternal.Functional_GenericCallback1<FusionInf> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_fuseSyn(mapArgs, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_fuseSyn(java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_GenericCallback1<FusionInf> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_fuseSyn(mapArgs, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_fuseSyn(java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_GenericCallback1<FusionInf> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_fuseSyn(mapArgs, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_fuseSyn(java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.Functional_GenericCallback1<FusionInf> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_fuseSyn(mapArgs, __ctx, __explicitCtx, __synchronous, 
                             new IceInternal.Functional_TwowayCallbackArg1<RPCWiseFuse.FusionInf>(__responseCb, __exceptionCb, __sentCb)
                                 {
                                     public final void __completed(Ice.AsyncResult __result)
                                     {
                                         WiseFusionInfPrxHelper.__fuseSyn_completed(this, __result);
                                     }
                                 });
    }

    private Ice.AsyncResult begin_fuseSyn(java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__fuseSyn_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__fuseSyn_name, __cb);
        try
        {
            __result.prepare(__fuseSyn_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            DirArgsHelper.write(__os, mapArgs);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public FusionInf end_fuseSyn(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __fuseSyn_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            FusionInf __ret = null;
            __ret = FusionInf.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __fuseSyn_completed(Ice.TwowayCallbackArg1<FusionInf> __cb, Ice.AsyncResult __result)
    {
        RPCWiseFuse.WiseFusionInfPrx __proxy = (RPCWiseFuse.WiseFusionInfPrx)__result.getProxy();
        FusionInf __ret = null;
        try
        {
            __ret = __proxy.end_fuseSyn(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __geneThumbImg_name = "geneThumbImg";

    public boolean geneThumbImg(String inPath, String outPath, String bandlist)
    {
        return geneThumbImg(inPath, outPath, bandlist, null, false);
    }

    public boolean geneThumbImg(String inPath, String outPath, String bandlist, java.util.Map<String, String> __ctx)
    {
        return geneThumbImg(inPath, outPath, bandlist, __ctx, true);
    }

    private boolean geneThumbImg(String inPath, String outPath, String bandlist, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__geneThumbImg_name);
        return end_geneThumbImg(begin_geneThumbImg(inPath, outPath, bandlist, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_geneThumbImg(String inPath, String outPath, String bandlist)
    {
        return begin_geneThumbImg(inPath, outPath, bandlist, null, false, false, null);
    }

    public Ice.AsyncResult begin_geneThumbImg(String inPath, String outPath, String bandlist, java.util.Map<String, String> __ctx)
    {
        return begin_geneThumbImg(inPath, outPath, bandlist, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_geneThumbImg(String inPath, String outPath, String bandlist, Ice.Callback __cb)
    {
        return begin_geneThumbImg(inPath, outPath, bandlist, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_geneThumbImg(String inPath, String outPath, String bandlist, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_geneThumbImg(inPath, outPath, bandlist, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_geneThumbImg(String inPath, String outPath, String bandlist, Callback_WiseFusionInf_geneThumbImg __cb)
    {
        return begin_geneThumbImg(inPath, outPath, bandlist, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_geneThumbImg(String inPath, String outPath, String bandlist, java.util.Map<String, String> __ctx, Callback_WiseFusionInf_geneThumbImg __cb)
    {
        return begin_geneThumbImg(inPath, outPath, bandlist, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_geneThumbImg(String inPath, 
                                              String outPath, 
                                              String bandlist, 
                                              IceInternal.Functional_BoolCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_geneThumbImg(inPath, outPath, bandlist, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_geneThumbImg(String inPath, 
                                              String outPath, 
                                              String bandlist, 
                                              IceInternal.Functional_BoolCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_geneThumbImg(inPath, outPath, bandlist, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_geneThumbImg(String inPath, 
                                              String outPath, 
                                              String bandlist, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_BoolCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_geneThumbImg(inPath, outPath, bandlist, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_geneThumbImg(String inPath, 
                                              String outPath, 
                                              String bandlist, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_BoolCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_geneThumbImg(inPath, outPath, bandlist, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_geneThumbImg(String inPath, 
                                               String outPath, 
                                               String bandlist, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.Functional_BoolCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_geneThumbImg(inPath, outPath, bandlist, __ctx, __explicitCtx, __synchronous, 
                                  new IceInternal.Functional_TwowayCallbackBool(__responseCb, __exceptionCb, __sentCb)
                                      {
                                          public final void __completed(Ice.AsyncResult __result)
                                          {
                                              WiseFusionInfPrxHelper.__geneThumbImg_completed(this, __result);
                                          }
                                      });
    }

    private Ice.AsyncResult begin_geneThumbImg(String inPath, 
                                               String outPath, 
                                               String bandlist, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__geneThumbImg_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__geneThumbImg_name, __cb);
        try
        {
            __result.prepare(__geneThumbImg_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(inPath);
            __os.writeString(outPath);
            __os.writeString(bandlist);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_geneThumbImg(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __geneThumbImg_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __geneThumbImg_completed(Ice.TwowayCallbackBool __cb, Ice.AsyncResult __result)
    {
        RPCWiseFuse.WiseFusionInfPrx __proxy = (RPCWiseFuse.WiseFusionInfPrx)__result.getProxy();
        boolean __ret = false;
        try
        {
            __ret = __proxy.end_geneThumbImg(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static WiseFusionInfPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), WiseFusionInfPrx.class, WiseFusionInfPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static WiseFusionInfPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), WiseFusionInfPrx.class, WiseFusionInfPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static WiseFusionInfPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), WiseFusionInfPrx.class, WiseFusionInfPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static WiseFusionInfPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), WiseFusionInfPrx.class, WiseFusionInfPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static WiseFusionInfPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, WiseFusionInfPrx.class, WiseFusionInfPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static WiseFusionInfPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, WiseFusionInfPrx.class, WiseFusionInfPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::RPCWiseFuse::WiseFusionInf"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, WiseFusionInfPrx v)
    {
        __os.writeProxy(v);
    }

    public static WiseFusionInfPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            WiseFusionInfPrxHelper result = new WiseFusionInfPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
