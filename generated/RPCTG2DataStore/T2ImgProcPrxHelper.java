// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `TG2DataStoreRpc.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package RPCTG2DataStore;

/**
 * Provides type-specific helper functions.
 **/
public final class T2ImgProcPrxHelper extends Ice.ObjectPrxHelperBase implements T2ImgProcPrx
{
    private static final String __CreateThumbnail_name = "CreateThumbnail";

    public boolean CreateThumbnail(String input, int nSamples, int nLines, String output, String type, int stepSample, int stepLine)
    {
        return CreateThumbnail(input, nSamples, nLines, output, type, stepSample, stepLine, null, false);
    }

    public boolean CreateThumbnail(String input, int nSamples, int nLines, String output, String type, int stepSample, int stepLine, java.util.Map<String, String> __ctx)
    {
        return CreateThumbnail(input, nSamples, nLines, output, type, stepSample, stepLine, __ctx, true);
    }

    private boolean CreateThumbnail(String input, int nSamples, int nLines, String output, String type, int stepSample, int stepLine, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__CreateThumbnail_name);
        return end_CreateThumbnail(begin_CreateThumbnail(input, nSamples, nLines, output, type, stepSample, stepLine, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_CreateThumbnail(String input, int nSamples, int nLines, String output, String type, int stepSample, int stepLine)
    {
        return begin_CreateThumbnail(input, nSamples, nLines, output, type, stepSample, stepLine, null, false, false, null);
    }

    public Ice.AsyncResult begin_CreateThumbnail(String input, int nSamples, int nLines, String output, String type, int stepSample, int stepLine, java.util.Map<String, String> __ctx)
    {
        return begin_CreateThumbnail(input, nSamples, nLines, output, type, stepSample, stepLine, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_CreateThumbnail(String input, int nSamples, int nLines, String output, String type, int stepSample, int stepLine, Ice.Callback __cb)
    {
        return begin_CreateThumbnail(input, nSamples, nLines, output, type, stepSample, stepLine, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_CreateThumbnail(String input, int nSamples, int nLines, String output, String type, int stepSample, int stepLine, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_CreateThumbnail(input, nSamples, nLines, output, type, stepSample, stepLine, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_CreateThumbnail(String input, int nSamples, int nLines, String output, String type, int stepSample, int stepLine, Callback_T2ImgProc_CreateThumbnail __cb)
    {
        return begin_CreateThumbnail(input, nSamples, nLines, output, type, stepSample, stepLine, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_CreateThumbnail(String input, int nSamples, int nLines, String output, String type, int stepSample, int stepLine, java.util.Map<String, String> __ctx, Callback_T2ImgProc_CreateThumbnail __cb)
    {
        return begin_CreateThumbnail(input, nSamples, nLines, output, type, stepSample, stepLine, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_CreateThumbnail(String input, 
                                                 int nSamples, 
                                                 int nLines, 
                                                 String output, 
                                                 String type, 
                                                 int stepSample, 
                                                 int stepLine, 
                                                 IceInternal.Functional_BoolCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_CreateThumbnail(input, nSamples, nLines, output, type, stepSample, stepLine, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_CreateThumbnail(String input, 
                                                 int nSamples, 
                                                 int nLines, 
                                                 String output, 
                                                 String type, 
                                                 int stepSample, 
                                                 int stepLine, 
                                                 IceInternal.Functional_BoolCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_CreateThumbnail(input, nSamples, nLines, output, type, stepSample, stepLine, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_CreateThumbnail(String input, 
                                                 int nSamples, 
                                                 int nLines, 
                                                 String output, 
                                                 String type, 
                                                 int stepSample, 
                                                 int stepLine, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_BoolCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_CreateThumbnail(input, nSamples, nLines, output, type, stepSample, stepLine, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_CreateThumbnail(String input, 
                                                 int nSamples, 
                                                 int nLines, 
                                                 String output, 
                                                 String type, 
                                                 int stepSample, 
                                                 int stepLine, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_BoolCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_CreateThumbnail(input, nSamples, nLines, output, type, stepSample, stepLine, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_CreateThumbnail(String input, 
                                                  int nSamples, 
                                                  int nLines, 
                                                  String output, 
                                                  String type, 
                                                  int stepSample, 
                                                  int stepLine, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.Functional_BoolCallback __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_CreateThumbnail(input, nSamples, nLines, output, type, stepSample, stepLine, __ctx, __explicitCtx, __synchronous, 
                                     new IceInternal.Functional_TwowayCallbackBool(__responseCb, __exceptionCb, __sentCb)
                                         {
                                             public final void __completed(Ice.AsyncResult __result)
                                             {
                                                 T2ImgProcPrxHelper.__CreateThumbnail_completed(this, __result);
                                             }
                                         });
    }

    private Ice.AsyncResult begin_CreateThumbnail(String input, 
                                                  int nSamples, 
                                                  int nLines, 
                                                  String output, 
                                                  String type, 
                                                  int stepSample, 
                                                  int stepLine, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__CreateThumbnail_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__CreateThumbnail_name, __cb);
        try
        {
            __result.prepare(__CreateThumbnail_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(input);
            __os.writeInt(nSamples);
            __os.writeInt(nLines);
            __os.writeString(output);
            __os.writeString(type);
            __os.writeInt(stepSample);
            __os.writeInt(stepLine);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_CreateThumbnail(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __CreateThumbnail_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __CreateThumbnail_completed(Ice.TwowayCallbackBool __cb, Ice.AsyncResult __result)
    {
        RPCTG2DataStore.T2ImgProcPrx __proxy = (RPCTG2DataStore.T2ImgProcPrx)__result.getProxy();
        boolean __ret = false;
        try
        {
            __ret = __proxy.end_CreateThumbnail(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __ReadIALTBasicInfo_name = "ReadIALTBasicInfo";

    public IALTInfo ReadIALTBasicInfo(String szImageFile, String szParamFile1, String szParamFile3)
    {
        return ReadIALTBasicInfo(szImageFile, szParamFile1, szParamFile3, null, false);
    }

    public IALTInfo ReadIALTBasicInfo(String szImageFile, String szParamFile1, String szParamFile3, java.util.Map<String, String> __ctx)
    {
        return ReadIALTBasicInfo(szImageFile, szParamFile1, szParamFile3, __ctx, true);
    }

    private IALTInfo ReadIALTBasicInfo(String szImageFile, String szParamFile1, String szParamFile3, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__ReadIALTBasicInfo_name);
        return end_ReadIALTBasicInfo(begin_ReadIALTBasicInfo(szImageFile, szParamFile1, szParamFile3, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_ReadIALTBasicInfo(String szImageFile, String szParamFile1, String szParamFile3)
    {
        return begin_ReadIALTBasicInfo(szImageFile, szParamFile1, szParamFile3, null, false, false, null);
    }

    public Ice.AsyncResult begin_ReadIALTBasicInfo(String szImageFile, String szParamFile1, String szParamFile3, java.util.Map<String, String> __ctx)
    {
        return begin_ReadIALTBasicInfo(szImageFile, szParamFile1, szParamFile3, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_ReadIALTBasicInfo(String szImageFile, String szParamFile1, String szParamFile3, Ice.Callback __cb)
    {
        return begin_ReadIALTBasicInfo(szImageFile, szParamFile1, szParamFile3, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_ReadIALTBasicInfo(String szImageFile, String szParamFile1, String szParamFile3, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_ReadIALTBasicInfo(szImageFile, szParamFile1, szParamFile3, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_ReadIALTBasicInfo(String szImageFile, String szParamFile1, String szParamFile3, Callback_T2ImgProc_ReadIALTBasicInfo __cb)
    {
        return begin_ReadIALTBasicInfo(szImageFile, szParamFile1, szParamFile3, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_ReadIALTBasicInfo(String szImageFile, String szParamFile1, String szParamFile3, java.util.Map<String, String> __ctx, Callback_T2ImgProc_ReadIALTBasicInfo __cb)
    {
        return begin_ReadIALTBasicInfo(szImageFile, szParamFile1, szParamFile3, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_ReadIALTBasicInfo(String szImageFile, 
                                                   String szParamFile1, 
                                                   String szParamFile3, 
                                                   IceInternal.Functional_GenericCallback1<IALTInfo> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_ReadIALTBasicInfo(szImageFile, szParamFile1, szParamFile3, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_ReadIALTBasicInfo(String szImageFile, 
                                                   String szParamFile1, 
                                                   String szParamFile3, 
                                                   IceInternal.Functional_GenericCallback1<IALTInfo> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_ReadIALTBasicInfo(szImageFile, szParamFile1, szParamFile3, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_ReadIALTBasicInfo(String szImageFile, 
                                                   String szParamFile1, 
                                                   String szParamFile3, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<IALTInfo> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_ReadIALTBasicInfo(szImageFile, szParamFile1, szParamFile3, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_ReadIALTBasicInfo(String szImageFile, 
                                                   String szParamFile1, 
                                                   String szParamFile3, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<IALTInfo> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_ReadIALTBasicInfo(szImageFile, szParamFile1, szParamFile3, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_ReadIALTBasicInfo(String szImageFile, 
                                                    String szParamFile1, 
                                                    String szParamFile3, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.Functional_GenericCallback1<IALTInfo> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_ReadIALTBasicInfo(szImageFile, szParamFile1, szParamFile3, __ctx, __explicitCtx, __synchronous, 
                                       new IceInternal.Functional_TwowayCallbackArg1<RPCTG2DataStore.IALTInfo>(__responseCb, __exceptionCb, __sentCb)
                                           {
                                               public final void __completed(Ice.AsyncResult __result)
                                               {
                                                   T2ImgProcPrxHelper.__ReadIALTBasicInfo_completed(this, __result);
                                               }
                                           });
    }

    private Ice.AsyncResult begin_ReadIALTBasicInfo(String szImageFile, 
                                                    String szParamFile1, 
                                                    String szParamFile3, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__ReadIALTBasicInfo_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__ReadIALTBasicInfo_name, __cb);
        try
        {
            __result.prepare(__ReadIALTBasicInfo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(szImageFile);
            __os.writeString(szParamFile1);
            __os.writeString(szParamFile3);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public IALTInfo end_ReadIALTBasicInfo(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __ReadIALTBasicInfo_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            IALTInfo __ret = null;
            __ret = IALTInfo.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __ReadIALTBasicInfo_completed(Ice.TwowayCallbackArg1<IALTInfo> __cb, Ice.AsyncResult __result)
    {
        RPCTG2DataStore.T2ImgProcPrx __proxy = (RPCTG2DataStore.T2ImgProcPrx)__result.getProxy();
        IALTInfo __ret = null;
        try
        {
            __ret = __proxy.end_ReadIALTBasicInfo(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __funCloudEstimate_name = "funCloudEstimate";

    public double funCloudEstimate(String pathSrc, String nameSrc, int sizeX, int sizeY, ArgQuickView argCloudEstimate)
    {
        return funCloudEstimate(pathSrc, nameSrc, sizeX, sizeY, argCloudEstimate, null, false);
    }

    public double funCloudEstimate(String pathSrc, String nameSrc, int sizeX, int sizeY, ArgQuickView argCloudEstimate, java.util.Map<String, String> __ctx)
    {
        return funCloudEstimate(pathSrc, nameSrc, sizeX, sizeY, argCloudEstimate, __ctx, true);
    }

    private double funCloudEstimate(String pathSrc, String nameSrc, int sizeX, int sizeY, ArgQuickView argCloudEstimate, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__funCloudEstimate_name);
        return end_funCloudEstimate(begin_funCloudEstimate(pathSrc, nameSrc, sizeX, sizeY, argCloudEstimate, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_funCloudEstimate(String pathSrc, String nameSrc, int sizeX, int sizeY, ArgQuickView argCloudEstimate)
    {
        return begin_funCloudEstimate(pathSrc, nameSrc, sizeX, sizeY, argCloudEstimate, null, false, false, null);
    }

    public Ice.AsyncResult begin_funCloudEstimate(String pathSrc, String nameSrc, int sizeX, int sizeY, ArgQuickView argCloudEstimate, java.util.Map<String, String> __ctx)
    {
        return begin_funCloudEstimate(pathSrc, nameSrc, sizeX, sizeY, argCloudEstimate, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_funCloudEstimate(String pathSrc, String nameSrc, int sizeX, int sizeY, ArgQuickView argCloudEstimate, Ice.Callback __cb)
    {
        return begin_funCloudEstimate(pathSrc, nameSrc, sizeX, sizeY, argCloudEstimate, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_funCloudEstimate(String pathSrc, String nameSrc, int sizeX, int sizeY, ArgQuickView argCloudEstimate, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_funCloudEstimate(pathSrc, nameSrc, sizeX, sizeY, argCloudEstimate, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_funCloudEstimate(String pathSrc, String nameSrc, int sizeX, int sizeY, ArgQuickView argCloudEstimate, Callback_T2ImgProc_funCloudEstimate __cb)
    {
        return begin_funCloudEstimate(pathSrc, nameSrc, sizeX, sizeY, argCloudEstimate, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_funCloudEstimate(String pathSrc, String nameSrc, int sizeX, int sizeY, ArgQuickView argCloudEstimate, java.util.Map<String, String> __ctx, Callback_T2ImgProc_funCloudEstimate __cb)
    {
        return begin_funCloudEstimate(pathSrc, nameSrc, sizeX, sizeY, argCloudEstimate, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_funCloudEstimate(String pathSrc, 
                                                  String nameSrc, 
                                                  int sizeX, 
                                                  int sizeY, 
                                                  ArgQuickView argCloudEstimate, 
                                                  IceInternal.Functional_DoubleCallback __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_funCloudEstimate(pathSrc, nameSrc, sizeX, sizeY, argCloudEstimate, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_funCloudEstimate(String pathSrc, 
                                                  String nameSrc, 
                                                  int sizeX, 
                                                  int sizeY, 
                                                  ArgQuickView argCloudEstimate, 
                                                  IceInternal.Functional_DoubleCallback __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_funCloudEstimate(pathSrc, nameSrc, sizeX, sizeY, argCloudEstimate, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_funCloudEstimate(String pathSrc, 
                                                  String nameSrc, 
                                                  int sizeX, 
                                                  int sizeY, 
                                                  ArgQuickView argCloudEstimate, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_DoubleCallback __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_funCloudEstimate(pathSrc, nameSrc, sizeX, sizeY, argCloudEstimate, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_funCloudEstimate(String pathSrc, 
                                                  String nameSrc, 
                                                  int sizeX, 
                                                  int sizeY, 
                                                  ArgQuickView argCloudEstimate, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_DoubleCallback __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_funCloudEstimate(pathSrc, nameSrc, sizeX, sizeY, argCloudEstimate, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_funCloudEstimate(String pathSrc, 
                                                   String nameSrc, 
                                                   int sizeX, 
                                                   int sizeY, 
                                                   ArgQuickView argCloudEstimate, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.Functional_DoubleCallback __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_funCloudEstimate(pathSrc, nameSrc, sizeX, sizeY, argCloudEstimate, __ctx, __explicitCtx, __synchronous, 
                                      new IceInternal.Functional_TwowayCallbackDouble(__responseCb, __exceptionCb, __sentCb)
                                          {
                                              public final void __completed(Ice.AsyncResult __result)
                                              {
                                                  T2ImgProcPrxHelper.__funCloudEstimate_completed(this, __result);
                                              }
                                          });
    }

    private Ice.AsyncResult begin_funCloudEstimate(String pathSrc, 
                                                   String nameSrc, 
                                                   int sizeX, 
                                                   int sizeY, 
                                                   ArgQuickView argCloudEstimate, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__funCloudEstimate_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__funCloudEstimate_name, __cb);
        try
        {
            __result.prepare(__funCloudEstimate_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(pathSrc);
            __os.writeString(nameSrc);
            __os.writeInt(sizeX);
            __os.writeInt(sizeY);
            ArgQuickView.__write(__os, argCloudEstimate);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public double end_funCloudEstimate(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __funCloudEstimate_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            double __ret;
            __ret = __is.readDouble();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __funCloudEstimate_completed(Ice.TwowayCallbackDouble __cb, Ice.AsyncResult __result)
    {
        RPCTG2DataStore.T2ImgProcPrx __proxy = (RPCTG2DataStore.T2ImgProcPrx)__result.getProxy();
        double __ret = 0.0;
        try
        {
            __ret = __proxy.end_funCloudEstimate(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __funGenQuickView_name = "funGenQuickView";

    public boolean funGenQuickView(String pathSrc, String nameSrc, ArgQuickView argQuickView, String pathDes, String nameDes)
    {
        return funGenQuickView(pathSrc, nameSrc, argQuickView, pathDes, nameDes, null, false);
    }

    public boolean funGenQuickView(String pathSrc, String nameSrc, ArgQuickView argQuickView, String pathDes, String nameDes, java.util.Map<String, String> __ctx)
    {
        return funGenQuickView(pathSrc, nameSrc, argQuickView, pathDes, nameDes, __ctx, true);
    }

    private boolean funGenQuickView(String pathSrc, String nameSrc, ArgQuickView argQuickView, String pathDes, String nameDes, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__funGenQuickView_name);
        return end_funGenQuickView(begin_funGenQuickView(pathSrc, nameSrc, argQuickView, pathDes, nameDes, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_funGenQuickView(String pathSrc, String nameSrc, ArgQuickView argQuickView, String pathDes, String nameDes)
    {
        return begin_funGenQuickView(pathSrc, nameSrc, argQuickView, pathDes, nameDes, null, false, false, null);
    }

    public Ice.AsyncResult begin_funGenQuickView(String pathSrc, String nameSrc, ArgQuickView argQuickView, String pathDes, String nameDes, java.util.Map<String, String> __ctx)
    {
        return begin_funGenQuickView(pathSrc, nameSrc, argQuickView, pathDes, nameDes, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_funGenQuickView(String pathSrc, String nameSrc, ArgQuickView argQuickView, String pathDes, String nameDes, Ice.Callback __cb)
    {
        return begin_funGenQuickView(pathSrc, nameSrc, argQuickView, pathDes, nameDes, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_funGenQuickView(String pathSrc, String nameSrc, ArgQuickView argQuickView, String pathDes, String nameDes, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_funGenQuickView(pathSrc, nameSrc, argQuickView, pathDes, nameDes, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_funGenQuickView(String pathSrc, String nameSrc, ArgQuickView argQuickView, String pathDes, String nameDes, Callback_T2ImgProc_funGenQuickView __cb)
    {
        return begin_funGenQuickView(pathSrc, nameSrc, argQuickView, pathDes, nameDes, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_funGenQuickView(String pathSrc, String nameSrc, ArgQuickView argQuickView, String pathDes, String nameDes, java.util.Map<String, String> __ctx, Callback_T2ImgProc_funGenQuickView __cb)
    {
        return begin_funGenQuickView(pathSrc, nameSrc, argQuickView, pathDes, nameDes, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_funGenQuickView(String pathSrc, 
                                                 String nameSrc, 
                                                 ArgQuickView argQuickView, 
                                                 String pathDes, 
                                                 String nameDes, 
                                                 IceInternal.Functional_BoolCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_funGenQuickView(pathSrc, nameSrc, argQuickView, pathDes, nameDes, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_funGenQuickView(String pathSrc, 
                                                 String nameSrc, 
                                                 ArgQuickView argQuickView, 
                                                 String pathDes, 
                                                 String nameDes, 
                                                 IceInternal.Functional_BoolCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_funGenQuickView(pathSrc, nameSrc, argQuickView, pathDes, nameDes, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_funGenQuickView(String pathSrc, 
                                                 String nameSrc, 
                                                 ArgQuickView argQuickView, 
                                                 String pathDes, 
                                                 String nameDes, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_BoolCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_funGenQuickView(pathSrc, nameSrc, argQuickView, pathDes, nameDes, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_funGenQuickView(String pathSrc, 
                                                 String nameSrc, 
                                                 ArgQuickView argQuickView, 
                                                 String pathDes, 
                                                 String nameDes, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_BoolCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_funGenQuickView(pathSrc, nameSrc, argQuickView, pathDes, nameDes, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_funGenQuickView(String pathSrc, 
                                                  String nameSrc, 
                                                  ArgQuickView argQuickView, 
                                                  String pathDes, 
                                                  String nameDes, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.Functional_BoolCallback __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_funGenQuickView(pathSrc, nameSrc, argQuickView, pathDes, nameDes, __ctx, __explicitCtx, __synchronous, 
                                     new IceInternal.Functional_TwowayCallbackBool(__responseCb, __exceptionCb, __sentCb)
                                         {
                                             public final void __completed(Ice.AsyncResult __result)
                                             {
                                                 T2ImgProcPrxHelper.__funGenQuickView_completed(this, __result);
                                             }
                                         });
    }

    private Ice.AsyncResult begin_funGenQuickView(String pathSrc, 
                                                  String nameSrc, 
                                                  ArgQuickView argQuickView, 
                                                  String pathDes, 
                                                  String nameDes, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__funGenQuickView_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__funGenQuickView_name, __cb);
        try
        {
            __result.prepare(__funGenQuickView_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(pathSrc);
            __os.writeString(nameSrc);
            ArgQuickView.__write(__os, argQuickView);
            __os.writeString(pathDes);
            __os.writeString(nameDes);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_funGenQuickView(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __funGenQuickView_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __funGenQuickView_completed(Ice.TwowayCallbackBool __cb, Ice.AsyncResult __result)
    {
        RPCTG2DataStore.T2ImgProcPrx __proxy = (RPCTG2DataStore.T2ImgProcPrx)__result.getProxy();
        boolean __ret = false;
        try
        {
            __ret = __proxy.end_funGenQuickView(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __funGenThumbnail_name = "funGenThumbnail";

    public boolean funGenThumbnail(String pathSrc, String nameSrc, ArgQuickView argThumbnail, String pathDes, String nameDes)
    {
        return funGenThumbnail(pathSrc, nameSrc, argThumbnail, pathDes, nameDes, null, false);
    }

    public boolean funGenThumbnail(String pathSrc, String nameSrc, ArgQuickView argThumbnail, String pathDes, String nameDes, java.util.Map<String, String> __ctx)
    {
        return funGenThumbnail(pathSrc, nameSrc, argThumbnail, pathDes, nameDes, __ctx, true);
    }

    private boolean funGenThumbnail(String pathSrc, String nameSrc, ArgQuickView argThumbnail, String pathDes, String nameDes, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__funGenThumbnail_name);
        return end_funGenThumbnail(begin_funGenThumbnail(pathSrc, nameSrc, argThumbnail, pathDes, nameDes, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_funGenThumbnail(String pathSrc, String nameSrc, ArgQuickView argThumbnail, String pathDes, String nameDes)
    {
        return begin_funGenThumbnail(pathSrc, nameSrc, argThumbnail, pathDes, nameDes, null, false, false, null);
    }

    public Ice.AsyncResult begin_funGenThumbnail(String pathSrc, String nameSrc, ArgQuickView argThumbnail, String pathDes, String nameDes, java.util.Map<String, String> __ctx)
    {
        return begin_funGenThumbnail(pathSrc, nameSrc, argThumbnail, pathDes, nameDes, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_funGenThumbnail(String pathSrc, String nameSrc, ArgQuickView argThumbnail, String pathDes, String nameDes, Ice.Callback __cb)
    {
        return begin_funGenThumbnail(pathSrc, nameSrc, argThumbnail, pathDes, nameDes, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_funGenThumbnail(String pathSrc, String nameSrc, ArgQuickView argThumbnail, String pathDes, String nameDes, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_funGenThumbnail(pathSrc, nameSrc, argThumbnail, pathDes, nameDes, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_funGenThumbnail(String pathSrc, String nameSrc, ArgQuickView argThumbnail, String pathDes, String nameDes, Callback_T2ImgProc_funGenThumbnail __cb)
    {
        return begin_funGenThumbnail(pathSrc, nameSrc, argThumbnail, pathDes, nameDes, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_funGenThumbnail(String pathSrc, String nameSrc, ArgQuickView argThumbnail, String pathDes, String nameDes, java.util.Map<String, String> __ctx, Callback_T2ImgProc_funGenThumbnail __cb)
    {
        return begin_funGenThumbnail(pathSrc, nameSrc, argThumbnail, pathDes, nameDes, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_funGenThumbnail(String pathSrc, 
                                                 String nameSrc, 
                                                 ArgQuickView argThumbnail, 
                                                 String pathDes, 
                                                 String nameDes, 
                                                 IceInternal.Functional_BoolCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_funGenThumbnail(pathSrc, nameSrc, argThumbnail, pathDes, nameDes, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_funGenThumbnail(String pathSrc, 
                                                 String nameSrc, 
                                                 ArgQuickView argThumbnail, 
                                                 String pathDes, 
                                                 String nameDes, 
                                                 IceInternal.Functional_BoolCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_funGenThumbnail(pathSrc, nameSrc, argThumbnail, pathDes, nameDes, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_funGenThumbnail(String pathSrc, 
                                                 String nameSrc, 
                                                 ArgQuickView argThumbnail, 
                                                 String pathDes, 
                                                 String nameDes, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_BoolCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_funGenThumbnail(pathSrc, nameSrc, argThumbnail, pathDes, nameDes, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_funGenThumbnail(String pathSrc, 
                                                 String nameSrc, 
                                                 ArgQuickView argThumbnail, 
                                                 String pathDes, 
                                                 String nameDes, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_BoolCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_funGenThumbnail(pathSrc, nameSrc, argThumbnail, pathDes, nameDes, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_funGenThumbnail(String pathSrc, 
                                                  String nameSrc, 
                                                  ArgQuickView argThumbnail, 
                                                  String pathDes, 
                                                  String nameDes, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.Functional_BoolCallback __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_funGenThumbnail(pathSrc, nameSrc, argThumbnail, pathDes, nameDes, __ctx, __explicitCtx, __synchronous, 
                                     new IceInternal.Functional_TwowayCallbackBool(__responseCb, __exceptionCb, __sentCb)
                                         {
                                             public final void __completed(Ice.AsyncResult __result)
                                             {
                                                 T2ImgProcPrxHelper.__funGenThumbnail_completed(this, __result);
                                             }
                                         });
    }

    private Ice.AsyncResult begin_funGenThumbnail(String pathSrc, 
                                                  String nameSrc, 
                                                  ArgQuickView argThumbnail, 
                                                  String pathDes, 
                                                  String nameDes, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__funGenThumbnail_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__funGenThumbnail_name, __cb);
        try
        {
            __result.prepare(__funGenThumbnail_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(pathSrc);
            __os.writeString(nameSrc);
            ArgQuickView.__write(__os, argThumbnail);
            __os.writeString(pathDes);
            __os.writeString(nameDes);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_funGenThumbnail(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __funGenThumbnail_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __funGenThumbnail_completed(Ice.TwowayCallbackBool __cb, Ice.AsyncResult __result)
    {
        RPCTG2DataStore.T2ImgProcPrx __proxy = (RPCTG2DataStore.T2ImgProcPrx)__result.getProxy();
        boolean __ret = false;
        try
        {
            __ret = __proxy.end_funGenThumbnail(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __funPartViewLogic_name = "funPartViewLogic";

    public ResPartViewLogic funPartViewLogic(String path, String name, int viewWidth, int viewHeight, int overlapSizeX, int overlapSizeY, boolean isPartPhysic, boolean isCloudEstimate, ArgQuickView argCloudEstimate, boolean isQuickView, ArgQuickView argQuickView, boolean isThumbnail, ArgQuickView argThumbnail)
    {
        return funPartViewLogic(path, name, viewWidth, viewHeight, overlapSizeX, overlapSizeY, isPartPhysic, isCloudEstimate, argCloudEstimate, isQuickView, argQuickView, isThumbnail, argThumbnail, null, false);
    }

    public ResPartViewLogic funPartViewLogic(String path, String name, int viewWidth, int viewHeight, int overlapSizeX, int overlapSizeY, boolean isPartPhysic, boolean isCloudEstimate, ArgQuickView argCloudEstimate, boolean isQuickView, ArgQuickView argQuickView, boolean isThumbnail, ArgQuickView argThumbnail, java.util.Map<String, String> __ctx)
    {
        return funPartViewLogic(path, name, viewWidth, viewHeight, overlapSizeX, overlapSizeY, isPartPhysic, isCloudEstimate, argCloudEstimate, isQuickView, argQuickView, isThumbnail, argThumbnail, __ctx, true);
    }

    private ResPartViewLogic funPartViewLogic(String path, String name, int viewWidth, int viewHeight, int overlapSizeX, int overlapSizeY, boolean isPartPhysic, boolean isCloudEstimate, ArgQuickView argCloudEstimate, boolean isQuickView, ArgQuickView argQuickView, boolean isThumbnail, ArgQuickView argThumbnail, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__funPartViewLogic_name);
        return end_funPartViewLogic(begin_funPartViewLogic(path, name, viewWidth, viewHeight, overlapSizeX, overlapSizeY, isPartPhysic, isCloudEstimate, argCloudEstimate, isQuickView, argQuickView, isThumbnail, argThumbnail, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_funPartViewLogic(String path, String name, int viewWidth, int viewHeight, int overlapSizeX, int overlapSizeY, boolean isPartPhysic, boolean isCloudEstimate, ArgQuickView argCloudEstimate, boolean isQuickView, ArgQuickView argQuickView, boolean isThumbnail, ArgQuickView argThumbnail)
    {
        return begin_funPartViewLogic(path, name, viewWidth, viewHeight, overlapSizeX, overlapSizeY, isPartPhysic, isCloudEstimate, argCloudEstimate, isQuickView, argQuickView, isThumbnail, argThumbnail, null, false, false, null);
    }

    public Ice.AsyncResult begin_funPartViewLogic(String path, String name, int viewWidth, int viewHeight, int overlapSizeX, int overlapSizeY, boolean isPartPhysic, boolean isCloudEstimate, ArgQuickView argCloudEstimate, boolean isQuickView, ArgQuickView argQuickView, boolean isThumbnail, ArgQuickView argThumbnail, java.util.Map<String, String> __ctx)
    {
        return begin_funPartViewLogic(path, name, viewWidth, viewHeight, overlapSizeX, overlapSizeY, isPartPhysic, isCloudEstimate, argCloudEstimate, isQuickView, argQuickView, isThumbnail, argThumbnail, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_funPartViewLogic(String path, String name, int viewWidth, int viewHeight, int overlapSizeX, int overlapSizeY, boolean isPartPhysic, boolean isCloudEstimate, ArgQuickView argCloudEstimate, boolean isQuickView, ArgQuickView argQuickView, boolean isThumbnail, ArgQuickView argThumbnail, Ice.Callback __cb)
    {
        return begin_funPartViewLogic(path, name, viewWidth, viewHeight, overlapSizeX, overlapSizeY, isPartPhysic, isCloudEstimate, argCloudEstimate, isQuickView, argQuickView, isThumbnail, argThumbnail, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_funPartViewLogic(String path, String name, int viewWidth, int viewHeight, int overlapSizeX, int overlapSizeY, boolean isPartPhysic, boolean isCloudEstimate, ArgQuickView argCloudEstimate, boolean isQuickView, ArgQuickView argQuickView, boolean isThumbnail, ArgQuickView argThumbnail, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_funPartViewLogic(path, name, viewWidth, viewHeight, overlapSizeX, overlapSizeY, isPartPhysic, isCloudEstimate, argCloudEstimate, isQuickView, argQuickView, isThumbnail, argThumbnail, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_funPartViewLogic(String path, String name, int viewWidth, int viewHeight, int overlapSizeX, int overlapSizeY, boolean isPartPhysic, boolean isCloudEstimate, ArgQuickView argCloudEstimate, boolean isQuickView, ArgQuickView argQuickView, boolean isThumbnail, ArgQuickView argThumbnail, Callback_T2ImgProc_funPartViewLogic __cb)
    {
        return begin_funPartViewLogic(path, name, viewWidth, viewHeight, overlapSizeX, overlapSizeY, isPartPhysic, isCloudEstimate, argCloudEstimate, isQuickView, argQuickView, isThumbnail, argThumbnail, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_funPartViewLogic(String path, String name, int viewWidth, int viewHeight, int overlapSizeX, int overlapSizeY, boolean isPartPhysic, boolean isCloudEstimate, ArgQuickView argCloudEstimate, boolean isQuickView, ArgQuickView argQuickView, boolean isThumbnail, ArgQuickView argThumbnail, java.util.Map<String, String> __ctx, Callback_T2ImgProc_funPartViewLogic __cb)
    {
        return begin_funPartViewLogic(path, name, viewWidth, viewHeight, overlapSizeX, overlapSizeY, isPartPhysic, isCloudEstimate, argCloudEstimate, isQuickView, argQuickView, isThumbnail, argThumbnail, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_funPartViewLogic(String path, 
                                                  String name, 
                                                  int viewWidth, 
                                                  int viewHeight, 
                                                  int overlapSizeX, 
                                                  int overlapSizeY, 
                                                  boolean isPartPhysic, 
                                                  boolean isCloudEstimate, 
                                                  ArgQuickView argCloudEstimate, 
                                                  boolean isQuickView, 
                                                  ArgQuickView argQuickView, 
                                                  boolean isThumbnail, 
                                                  ArgQuickView argThumbnail, 
                                                  IceInternal.Functional_GenericCallback1<ResPartViewLogic> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_funPartViewLogic(path, name, viewWidth, viewHeight, overlapSizeX, overlapSizeY, isPartPhysic, isCloudEstimate, argCloudEstimate, isQuickView, argQuickView, isThumbnail, argThumbnail, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_funPartViewLogic(String path, 
                                                  String name, 
                                                  int viewWidth, 
                                                  int viewHeight, 
                                                  int overlapSizeX, 
                                                  int overlapSizeY, 
                                                  boolean isPartPhysic, 
                                                  boolean isCloudEstimate, 
                                                  ArgQuickView argCloudEstimate, 
                                                  boolean isQuickView, 
                                                  ArgQuickView argQuickView, 
                                                  boolean isThumbnail, 
                                                  ArgQuickView argThumbnail, 
                                                  IceInternal.Functional_GenericCallback1<ResPartViewLogic> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_funPartViewLogic(path, name, viewWidth, viewHeight, overlapSizeX, overlapSizeY, isPartPhysic, isCloudEstimate, argCloudEstimate, isQuickView, argQuickView, isThumbnail, argThumbnail, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_funPartViewLogic(String path, 
                                                  String name, 
                                                  int viewWidth, 
                                                  int viewHeight, 
                                                  int overlapSizeX, 
                                                  int overlapSizeY, 
                                                  boolean isPartPhysic, 
                                                  boolean isCloudEstimate, 
                                                  ArgQuickView argCloudEstimate, 
                                                  boolean isQuickView, 
                                                  ArgQuickView argQuickView, 
                                                  boolean isThumbnail, 
                                                  ArgQuickView argThumbnail, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_GenericCallback1<ResPartViewLogic> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_funPartViewLogic(path, name, viewWidth, viewHeight, overlapSizeX, overlapSizeY, isPartPhysic, isCloudEstimate, argCloudEstimate, isQuickView, argQuickView, isThumbnail, argThumbnail, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_funPartViewLogic(String path, 
                                                  String name, 
                                                  int viewWidth, 
                                                  int viewHeight, 
                                                  int overlapSizeX, 
                                                  int overlapSizeY, 
                                                  boolean isPartPhysic, 
                                                  boolean isCloudEstimate, 
                                                  ArgQuickView argCloudEstimate, 
                                                  boolean isQuickView, 
                                                  ArgQuickView argQuickView, 
                                                  boolean isThumbnail, 
                                                  ArgQuickView argThumbnail, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_GenericCallback1<ResPartViewLogic> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_funPartViewLogic(path, name, viewWidth, viewHeight, overlapSizeX, overlapSizeY, isPartPhysic, isCloudEstimate, argCloudEstimate, isQuickView, argQuickView, isThumbnail, argThumbnail, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_funPartViewLogic(String path, 
                                                   String name, 
                                                   int viewWidth, 
                                                   int viewHeight, 
                                                   int overlapSizeX, 
                                                   int overlapSizeY, 
                                                   boolean isPartPhysic, 
                                                   boolean isCloudEstimate, 
                                                   ArgQuickView argCloudEstimate, 
                                                   boolean isQuickView, 
                                                   ArgQuickView argQuickView, 
                                                   boolean isThumbnail, 
                                                   ArgQuickView argThumbnail, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.Functional_GenericCallback1<ResPartViewLogic> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_funPartViewLogic(path, name, viewWidth, viewHeight, overlapSizeX, overlapSizeY, isPartPhysic, isCloudEstimate, argCloudEstimate, isQuickView, argQuickView, isThumbnail, argThumbnail, __ctx, __explicitCtx, __synchronous, 
                                      new IceInternal.Functional_TwowayCallbackArg1<RPCTG2DataStore.ResPartViewLogic>(__responseCb, __exceptionCb, __sentCb)
                                          {
                                              public final void __completed(Ice.AsyncResult __result)
                                              {
                                                  T2ImgProcPrxHelper.__funPartViewLogic_completed(this, __result);
                                              }
                                          });
    }

    private Ice.AsyncResult begin_funPartViewLogic(String path, 
                                                   String name, 
                                                   int viewWidth, 
                                                   int viewHeight, 
                                                   int overlapSizeX, 
                                                   int overlapSizeY, 
                                                   boolean isPartPhysic, 
                                                   boolean isCloudEstimate, 
                                                   ArgQuickView argCloudEstimate, 
                                                   boolean isQuickView, 
                                                   ArgQuickView argQuickView, 
                                                   boolean isThumbnail, 
                                                   ArgQuickView argThumbnail, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__funPartViewLogic_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__funPartViewLogic_name, __cb);
        try
        {
            __result.prepare(__funPartViewLogic_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(path);
            __os.writeString(name);
            __os.writeInt(viewWidth);
            __os.writeInt(viewHeight);
            __os.writeInt(overlapSizeX);
            __os.writeInt(overlapSizeY);
            __os.writeBool(isPartPhysic);
            __os.writeBool(isCloudEstimate);
            ArgQuickView.__write(__os, argCloudEstimate);
            __os.writeBool(isQuickView);
            ArgQuickView.__write(__os, argQuickView);
            __os.writeBool(isThumbnail);
            ArgQuickView.__write(__os, argThumbnail);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public ResPartViewLogic end_funPartViewLogic(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __funPartViewLogic_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            ResPartViewLogic __ret = null;
            __ret = ResPartViewLogic.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __funPartViewLogic_completed(Ice.TwowayCallbackArg1<ResPartViewLogic> __cb, Ice.AsyncResult __result)
    {
        RPCTG2DataStore.T2ImgProcPrx __proxy = (RPCTG2DataStore.T2ImgProcPrx)__result.getProxy();
        ResPartViewLogic __ret = null;
        try
        {
            __ret = __proxy.end_funPartViewLogic(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __funPartViewPhysic_name = "funPartViewPhysic";

    public boolean funPartViewPhysic(String pathSrc, String nameSrc, int startX, int startY, int sizeX, int sizeY, String pathDes, String nameDes)
    {
        return funPartViewPhysic(pathSrc, nameSrc, startX, startY, sizeX, sizeY, pathDes, nameDes, null, false);
    }

    public boolean funPartViewPhysic(String pathSrc, String nameSrc, int startX, int startY, int sizeX, int sizeY, String pathDes, String nameDes, java.util.Map<String, String> __ctx)
    {
        return funPartViewPhysic(pathSrc, nameSrc, startX, startY, sizeX, sizeY, pathDes, nameDes, __ctx, true);
    }

    private boolean funPartViewPhysic(String pathSrc, String nameSrc, int startX, int startY, int sizeX, int sizeY, String pathDes, String nameDes, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__funPartViewPhysic_name);
        return end_funPartViewPhysic(begin_funPartViewPhysic(pathSrc, nameSrc, startX, startY, sizeX, sizeY, pathDes, nameDes, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_funPartViewPhysic(String pathSrc, String nameSrc, int startX, int startY, int sizeX, int sizeY, String pathDes, String nameDes)
    {
        return begin_funPartViewPhysic(pathSrc, nameSrc, startX, startY, sizeX, sizeY, pathDes, nameDes, null, false, false, null);
    }

    public Ice.AsyncResult begin_funPartViewPhysic(String pathSrc, String nameSrc, int startX, int startY, int sizeX, int sizeY, String pathDes, String nameDes, java.util.Map<String, String> __ctx)
    {
        return begin_funPartViewPhysic(pathSrc, nameSrc, startX, startY, sizeX, sizeY, pathDes, nameDes, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_funPartViewPhysic(String pathSrc, String nameSrc, int startX, int startY, int sizeX, int sizeY, String pathDes, String nameDes, Ice.Callback __cb)
    {
        return begin_funPartViewPhysic(pathSrc, nameSrc, startX, startY, sizeX, sizeY, pathDes, nameDes, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_funPartViewPhysic(String pathSrc, String nameSrc, int startX, int startY, int sizeX, int sizeY, String pathDes, String nameDes, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_funPartViewPhysic(pathSrc, nameSrc, startX, startY, sizeX, sizeY, pathDes, nameDes, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_funPartViewPhysic(String pathSrc, String nameSrc, int startX, int startY, int sizeX, int sizeY, String pathDes, String nameDes, Callback_T2ImgProc_funPartViewPhysic __cb)
    {
        return begin_funPartViewPhysic(pathSrc, nameSrc, startX, startY, sizeX, sizeY, pathDes, nameDes, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_funPartViewPhysic(String pathSrc, String nameSrc, int startX, int startY, int sizeX, int sizeY, String pathDes, String nameDes, java.util.Map<String, String> __ctx, Callback_T2ImgProc_funPartViewPhysic __cb)
    {
        return begin_funPartViewPhysic(pathSrc, nameSrc, startX, startY, sizeX, sizeY, pathDes, nameDes, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_funPartViewPhysic(String pathSrc, 
                                                   String nameSrc, 
                                                   int startX, 
                                                   int startY, 
                                                   int sizeX, 
                                                   int sizeY, 
                                                   String pathDes, 
                                                   String nameDes, 
                                                   IceInternal.Functional_BoolCallback __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_funPartViewPhysic(pathSrc, nameSrc, startX, startY, sizeX, sizeY, pathDes, nameDes, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_funPartViewPhysic(String pathSrc, 
                                                   String nameSrc, 
                                                   int startX, 
                                                   int startY, 
                                                   int sizeX, 
                                                   int sizeY, 
                                                   String pathDes, 
                                                   String nameDes, 
                                                   IceInternal.Functional_BoolCallback __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_funPartViewPhysic(pathSrc, nameSrc, startX, startY, sizeX, sizeY, pathDes, nameDes, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_funPartViewPhysic(String pathSrc, 
                                                   String nameSrc, 
                                                   int startX, 
                                                   int startY, 
                                                   int sizeX, 
                                                   int sizeY, 
                                                   String pathDes, 
                                                   String nameDes, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_BoolCallback __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_funPartViewPhysic(pathSrc, nameSrc, startX, startY, sizeX, sizeY, pathDes, nameDes, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_funPartViewPhysic(String pathSrc, 
                                                   String nameSrc, 
                                                   int startX, 
                                                   int startY, 
                                                   int sizeX, 
                                                   int sizeY, 
                                                   String pathDes, 
                                                   String nameDes, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_BoolCallback __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_funPartViewPhysic(pathSrc, nameSrc, startX, startY, sizeX, sizeY, pathDes, nameDes, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_funPartViewPhysic(String pathSrc, 
                                                    String nameSrc, 
                                                    int startX, 
                                                    int startY, 
                                                    int sizeX, 
                                                    int sizeY, 
                                                    String pathDes, 
                                                    String nameDes, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.Functional_BoolCallback __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_funPartViewPhysic(pathSrc, nameSrc, startX, startY, sizeX, sizeY, pathDes, nameDes, __ctx, __explicitCtx, __synchronous, 
                                       new IceInternal.Functional_TwowayCallbackBool(__responseCb, __exceptionCb, __sentCb)
                                           {
                                               public final void __completed(Ice.AsyncResult __result)
                                               {
                                                   T2ImgProcPrxHelper.__funPartViewPhysic_completed(this, __result);
                                               }
                                           });
    }

    private Ice.AsyncResult begin_funPartViewPhysic(String pathSrc, 
                                                    String nameSrc, 
                                                    int startX, 
                                                    int startY, 
                                                    int sizeX, 
                                                    int sizeY, 
                                                    String pathDes, 
                                                    String nameDes, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__funPartViewPhysic_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__funPartViewPhysic_name, __cb);
        try
        {
            __result.prepare(__funPartViewPhysic_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(pathSrc);
            __os.writeString(nameSrc);
            __os.writeInt(startX);
            __os.writeInt(startY);
            __os.writeInt(sizeX);
            __os.writeInt(sizeY);
            __os.writeString(pathDes);
            __os.writeString(nameDes);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_funPartViewPhysic(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __funPartViewPhysic_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __funPartViewPhysic_completed(Ice.TwowayCallbackBool __cb, Ice.AsyncResult __result)
    {
        RPCTG2DataStore.T2ImgProcPrx __proxy = (RPCTG2DataStore.T2ImgProcPrx)__result.getProxy();
        boolean __ret = false;
        try
        {
            __ret = __proxy.end_funPartViewPhysic(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __packageTiff0C_name = "packageTiff0C";

    public boolean packageTiff0C(String inputFilePath, String inputFileName)
    {
        return packageTiff0C(inputFilePath, inputFileName, null, false);
    }

    public boolean packageTiff0C(String inputFilePath, String inputFileName, java.util.Map<String, String> __ctx)
    {
        return packageTiff0C(inputFilePath, inputFileName, __ctx, true);
    }

    private boolean packageTiff0C(String inputFilePath, String inputFileName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__packageTiff0C_name);
        return end_packageTiff0C(begin_packageTiff0C(inputFilePath, inputFileName, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_packageTiff0C(String inputFilePath, String inputFileName)
    {
        return begin_packageTiff0C(inputFilePath, inputFileName, null, false, false, null);
    }

    public Ice.AsyncResult begin_packageTiff0C(String inputFilePath, String inputFileName, java.util.Map<String, String> __ctx)
    {
        return begin_packageTiff0C(inputFilePath, inputFileName, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_packageTiff0C(String inputFilePath, String inputFileName, Ice.Callback __cb)
    {
        return begin_packageTiff0C(inputFilePath, inputFileName, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_packageTiff0C(String inputFilePath, String inputFileName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_packageTiff0C(inputFilePath, inputFileName, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_packageTiff0C(String inputFilePath, String inputFileName, Callback_T2ImgProc_packageTiff0C __cb)
    {
        return begin_packageTiff0C(inputFilePath, inputFileName, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_packageTiff0C(String inputFilePath, String inputFileName, java.util.Map<String, String> __ctx, Callback_T2ImgProc_packageTiff0C __cb)
    {
        return begin_packageTiff0C(inputFilePath, inputFileName, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_packageTiff0C(String inputFilePath, 
                                               String inputFileName, 
                                               IceInternal.Functional_BoolCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_packageTiff0C(inputFilePath, inputFileName, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_packageTiff0C(String inputFilePath, 
                                               String inputFileName, 
                                               IceInternal.Functional_BoolCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_packageTiff0C(inputFilePath, inputFileName, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_packageTiff0C(String inputFilePath, 
                                               String inputFileName, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_BoolCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_packageTiff0C(inputFilePath, inputFileName, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_packageTiff0C(String inputFilePath, 
                                               String inputFileName, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_BoolCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_packageTiff0C(inputFilePath, inputFileName, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_packageTiff0C(String inputFilePath, 
                                                String inputFileName, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.Functional_BoolCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_packageTiff0C(inputFilePath, inputFileName, __ctx, __explicitCtx, __synchronous, 
                                   new IceInternal.Functional_TwowayCallbackBool(__responseCb, __exceptionCb, __sentCb)
                                       {
                                           public final void __completed(Ice.AsyncResult __result)
                                           {
                                               T2ImgProcPrxHelper.__packageTiff0C_completed(this, __result);
                                           }
                                       });
    }

    private Ice.AsyncResult begin_packageTiff0C(String inputFilePath, 
                                                String inputFileName, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__packageTiff0C_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__packageTiff0C_name, __cb);
        try
        {
            __result.prepare(__packageTiff0C_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(inputFilePath);
            __os.writeString(inputFileName);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_packageTiff0C(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __packageTiff0C_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __packageTiff0C_completed(Ice.TwowayCallbackBool __cb, Ice.AsyncResult __result)
    {
        RPCTG2DataStore.T2ImgProcPrx __proxy = (RPCTG2DataStore.T2ImgProcPrx)__result.getProxy();
        boolean __ret = false;
        try
        {
            __ret = __proxy.end_packageTiff0C(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static T2ImgProcPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), T2ImgProcPrx.class, T2ImgProcPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static T2ImgProcPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), T2ImgProcPrx.class, T2ImgProcPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static T2ImgProcPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), T2ImgProcPrx.class, T2ImgProcPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static T2ImgProcPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), T2ImgProcPrx.class, T2ImgProcPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static T2ImgProcPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, T2ImgProcPrx.class, T2ImgProcPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static T2ImgProcPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, T2ImgProcPrx.class, T2ImgProcPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::RPCTG2DataStore::T2ImgProc"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, T2ImgProcPrx v)
    {
        __os.writeProxy(v);
    }

    public static T2ImgProcPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            T2ImgProcPrxHelper result = new T2ImgProcPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
