// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `TG2DataStoreRpc.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package RPCTG2DataStore;

public abstract class _T2ImgProcDisp extends Ice.ObjectImpl implements T2ImgProc
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::RPCTG2DataStore::T2ImgProc"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    /**
     * IALT生成缩略图
     **/
    public final boolean CreateThumbnail(String input, int nSamples, int nLines, String output, String type, int stepSample, int stepLine)
    {
        return CreateThumbnail(input, nSamples, nLines, output, type, stepSample, stepLine, null);
    }

    /**
     * IALT提取元信息
     **/
    public final IALTInfo ReadIALTBasicInfo(String szImageFile, String szParamFile1, String szParamFile3)
    {
        return ReadIALTBasicInfo(szImageFile, szParamFile1, szParamFile3, null);
    }

    /**
     * 云判
     * 返回：-1：失败；>=0		云覆盖率(保留2位小数)
     **/
    public final double funCloudEstimate(String pathSrc, String nameSrc, int sizeX, int sizeY, ArgQuickView argCloudEstimate)
    {
        return funCloudEstimate(pathSrc, nameSrc, sizeX, sizeY, argCloudEstimate, null);
    }

    /**
     * 生成缩略图
     **/
    public final boolean funGenQuickView(String pathSrc, String nameSrc, ArgQuickView argQuickView, String pathDes, String nameDes)
    {
        return funGenQuickView(pathSrc, nameSrc, argQuickView, pathDes, nameDes, null);
    }

    /**
     * 生成拇指图
     **/
    public final boolean funGenThumbnail(String pathSrc, String nameSrc, ArgQuickView argThumbnail, String pathDes, String nameDes)
    {
        return funGenThumbnail(pathSrc, nameSrc, argThumbnail, pathDes, nameDes, null);
    }

    /**
     * 逻辑分景
     **/
    public final ResPartViewLogic funPartViewLogic(String path, String name, int viewWidth, int viewHeight, int overlapSizeX, int overlapSizeY, boolean isPartPhysic, boolean isCloudEstimate, ArgQuickView argCloudEstimate, boolean isQuickView, ArgQuickView argQuickView, boolean isThumbnail, ArgQuickView argThumbnail)
    {
        return funPartViewLogic(path, name, viewWidth, viewHeight, overlapSizeX, overlapSizeY, isPartPhysic, isCloudEstimate, argCloudEstimate, isQuickView, argQuickView, isThumbnail, argThumbnail, null);
    }

    /**
     * 物理分景
     **/
    public final boolean funPartViewPhysic(String pathSrc, String nameSrc, int startX, int startY, int sizeX, int sizeY, String pathDes, String nameDes)
    {
        return funPartViewPhysic(pathSrc, nameSrc, startX, startY, sizeX, sizeY, pathDes, nameDes, null);
    }

    /**
     * 海军.dat封装为tiff方法
     **/
    public final boolean packageTiff0C(String inputFilePath, String inputFileName)
    {
        return packageTiff0C(inputFilePath, inputFileName, null);
    }

    public static Ice.DispatchStatus ___packageTiff0C(T2ImgProc __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String inputFilePath;
        String inputFileName;
        inputFilePath = __is.readString();
        inputFileName = __is.readString();
        __inS.endReadParams();
        boolean __ret = __obj.packageTiff0C(inputFilePath, inputFileName, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeBool(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___funPartViewLogic(T2ImgProc __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String path;
        String name;
        int viewWidth;
        int viewHeight;
        int overlapSizeX;
        int overlapSizeY;
        boolean isPartPhysic;
        boolean isCloudEstimate;
        ArgQuickView argCloudEstimate = null;
        boolean isQuickView;
        ArgQuickView argQuickView = null;
        boolean isThumbnail;
        ArgQuickView argThumbnail = null;
        path = __is.readString();
        name = __is.readString();
        viewWidth = __is.readInt();
        viewHeight = __is.readInt();
        overlapSizeX = __is.readInt();
        overlapSizeY = __is.readInt();
        isPartPhysic = __is.readBool();
        isCloudEstimate = __is.readBool();
        argCloudEstimate = ArgQuickView.__read(__is, argCloudEstimate);
        isQuickView = __is.readBool();
        argQuickView = ArgQuickView.__read(__is, argQuickView);
        isThumbnail = __is.readBool();
        argThumbnail = ArgQuickView.__read(__is, argThumbnail);
        __inS.endReadParams();
        ResPartViewLogic __ret = __obj.funPartViewLogic(path, name, viewWidth, viewHeight, overlapSizeX, overlapSizeY, isPartPhysic, isCloudEstimate, argCloudEstimate, isQuickView, argQuickView, isThumbnail, argThumbnail, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        ResPartViewLogic.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___funPartViewPhysic(T2ImgProc __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String pathSrc;
        String nameSrc;
        int startX;
        int startY;
        int sizeX;
        int sizeY;
        String pathDes;
        String nameDes;
        pathSrc = __is.readString();
        nameSrc = __is.readString();
        startX = __is.readInt();
        startY = __is.readInt();
        sizeX = __is.readInt();
        sizeY = __is.readInt();
        pathDes = __is.readString();
        nameDes = __is.readString();
        __inS.endReadParams();
        boolean __ret = __obj.funPartViewPhysic(pathSrc, nameSrc, startX, startY, sizeX, sizeY, pathDes, nameDes, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeBool(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___funCloudEstimate(T2ImgProc __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String pathSrc;
        String nameSrc;
        int sizeX;
        int sizeY;
        ArgQuickView argCloudEstimate = null;
        pathSrc = __is.readString();
        nameSrc = __is.readString();
        sizeX = __is.readInt();
        sizeY = __is.readInt();
        argCloudEstimate = ArgQuickView.__read(__is, argCloudEstimate);
        __inS.endReadParams();
        double __ret = __obj.funCloudEstimate(pathSrc, nameSrc, sizeX, sizeY, argCloudEstimate, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeDouble(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___funGenQuickView(T2ImgProc __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String pathSrc;
        String nameSrc;
        ArgQuickView argQuickView = null;
        String pathDes;
        String nameDes;
        pathSrc = __is.readString();
        nameSrc = __is.readString();
        argQuickView = ArgQuickView.__read(__is, argQuickView);
        pathDes = __is.readString();
        nameDes = __is.readString();
        __inS.endReadParams();
        boolean __ret = __obj.funGenQuickView(pathSrc, nameSrc, argQuickView, pathDes, nameDes, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeBool(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___funGenThumbnail(T2ImgProc __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String pathSrc;
        String nameSrc;
        ArgQuickView argThumbnail = null;
        String pathDes;
        String nameDes;
        pathSrc = __is.readString();
        nameSrc = __is.readString();
        argThumbnail = ArgQuickView.__read(__is, argThumbnail);
        pathDes = __is.readString();
        nameDes = __is.readString();
        __inS.endReadParams();
        boolean __ret = __obj.funGenThumbnail(pathSrc, nameSrc, argThumbnail, pathDes, nameDes, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeBool(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___ReadIALTBasicInfo(T2ImgProc __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String szImageFile;
        String szParamFile1;
        String szParamFile3;
        szImageFile = __is.readString();
        szParamFile1 = __is.readString();
        szParamFile3 = __is.readString();
        __inS.endReadParams();
        IALTInfo __ret = __obj.ReadIALTBasicInfo(szImageFile, szParamFile1, szParamFile3, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        IALTInfo.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___CreateThumbnail(T2ImgProc __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String input;
        int nSamples;
        int nLines;
        String output;
        String type;
        int stepSample;
        int stepLine;
        input = __is.readString();
        nSamples = __is.readInt();
        nLines = __is.readInt();
        output = __is.readString();
        type = __is.readString();
        stepSample = __is.readInt();
        stepLine = __is.readInt();
        __inS.endReadParams();
        boolean __ret = __obj.CreateThumbnail(input, nSamples, nLines, output, type, stepSample, stepLine, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeBool(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "CreateThumbnail",
        "ReadIALTBasicInfo",
        "funCloudEstimate",
        "funGenQuickView",
        "funGenThumbnail",
        "funPartViewLogic",
        "funPartViewPhysic",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "packageTiff0C"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___CreateThumbnail(this, in, __current);
            }
            case 1:
            {
                return ___ReadIALTBasicInfo(this, in, __current);
            }
            case 2:
            {
                return ___funCloudEstimate(this, in, __current);
            }
            case 3:
            {
                return ___funGenQuickView(this, in, __current);
            }
            case 4:
            {
                return ___funGenThumbnail(this, in, __current);
            }
            case 5:
            {
                return ___funPartViewLogic(this, in, __current);
            }
            case 6:
            {
                return ___funPartViewPhysic(this, in, __current);
            }
            case 7:
            {
                return ___ice_id(this, in, __current);
            }
            case 8:
            {
                return ___ice_ids(this, in, __current);
            }
            case 9:
            {
                return ___ice_isA(this, in, __current);
            }
            case 10:
            {
                return ___ice_ping(this, in, __current);
            }
            case 11:
            {
                return ___packageTiff0C(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
