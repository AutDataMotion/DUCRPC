// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `TG2DataStoreRpc.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package RPCTG2DataStore;

public class ArgQuickView implements java.lang.Cloneable, java.io.Serializable
{
    public int band1;

    public int band2;

    public int band3;

    public int scale;

    public int type;

    public ArgQuickView()
    {
    }

    public ArgQuickView(int band1, int band2, int band3, int scale, int type)
    {
        this.band1 = band1;
        this.band2 = band2;
        this.band3 = band3;
        this.scale = scale;
        this.type = type;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        ArgQuickView _r = null;
        if(rhs instanceof ArgQuickView)
        {
            _r = (ArgQuickView)rhs;
        }

        if(_r != null)
        {
            if(band1 != _r.band1)
            {
                return false;
            }
            if(band2 != _r.band2)
            {
                return false;
            }
            if(band3 != _r.band3)
            {
                return false;
            }
            if(scale != _r.scale)
            {
                return false;
            }
            if(type != _r.type)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::RPCTG2DataStore::ArgQuickView");
        __h = IceInternal.HashUtil.hashAdd(__h, band1);
        __h = IceInternal.HashUtil.hashAdd(__h, band2);
        __h = IceInternal.HashUtil.hashAdd(__h, band3);
        __h = IceInternal.HashUtil.hashAdd(__h, scale);
        __h = IceInternal.HashUtil.hashAdd(__h, type);
        return __h;
    }

    public ArgQuickView
    clone()
    {
        ArgQuickView c = null;
        try
        {
            c = (ArgQuickView)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(band1);
        __os.writeInt(band2);
        __os.writeInt(band3);
        __os.writeInt(scale);
        __os.writeInt(type);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        band1 = __is.readInt();
        band2 = __is.readInt();
        band3 = __is.readInt();
        scale = __is.readInt();
        type = __is.readInt();
    }

    static public void
    __write(IceInternal.BasicStream __os, ArgQuickView __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public ArgQuickView
    __read(IceInternal.BasicStream __is, ArgQuickView __v)
    {
        if(__v == null)
        {
             __v = new ArgQuickView();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final ArgQuickView __nullMarshalValue = new ArgQuickView();

    public static final long serialVersionUID = -3949665362846317082L;
}
