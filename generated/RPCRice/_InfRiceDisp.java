// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `rice.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package RPCRice;

public abstract class _InfRiceDisp extends Ice.ObjectImpl implements InfRice
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::RPCRice::InfRice"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final String PreProcessing(PreProcess inputfile, java.util.Map<java.lang.String, java.lang.String> mapArgs)
    {
        return PreProcessing(inputfile, mapArgs, null);
    }

    public final String landdrought(Drought inputdrought, java.util.Map<java.lang.String, java.lang.String> mapArgs)
    {
        return landdrought(inputdrought, mapArgs, null);
    }

    public final String landyield(Yield inputyield, java.util.Map<java.lang.String, java.lang.String> mapArgs)
    {
        return landyield(inputyield, mapArgs, null);
    }

    public final String maxlikehood(ClassifyA inputclass, java.util.Map<java.lang.String, java.lang.String> mapArgs)
    {
        return maxlikehood(inputclass, mapArgs, null);
    }

    public final String ricegrowth(Growth inputGrowth, java.util.Map<java.lang.String, java.lang.String> mapArgs)
    {
        return ricegrowth(inputGrowth, mapArgs, null);
    }

    public final String split(ClassifyB inputclass, java.util.Map<java.lang.String, java.lang.String> mapArgs)
    {
        return split(inputclass, mapArgs, null);
    }

    public static Ice.DispatchStatus ___PreProcessing(InfRice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        PreProcess inputfile = null;
        java.util.Map<java.lang.String, java.lang.String> mapArgs;
        inputfile = PreProcess.__read(__is, inputfile);
        mapArgs = DirArgsHelper.read(__is);
        __inS.endReadParams();
        String __ret = __obj.PreProcessing(inputfile, mapArgs, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___maxlikehood(InfRice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        ClassifyA inputclass = null;
        java.util.Map<java.lang.String, java.lang.String> mapArgs;
        inputclass = ClassifyA.__read(__is, inputclass);
        mapArgs = DirArgsHelper.read(__is);
        __inS.endReadParams();
        String __ret = __obj.maxlikehood(inputclass, mapArgs, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___split(InfRice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        ClassifyB inputclass = null;
        java.util.Map<java.lang.String, java.lang.String> mapArgs;
        inputclass = ClassifyB.__read(__is, inputclass);
        mapArgs = DirArgsHelper.read(__is);
        __inS.endReadParams();
        String __ret = __obj.split(inputclass, mapArgs, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___ricegrowth(InfRice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        Growth inputGrowth = null;
        java.util.Map<java.lang.String, java.lang.String> mapArgs;
        inputGrowth = Growth.__read(__is, inputGrowth);
        mapArgs = DirArgsHelper.read(__is);
        __inS.endReadParams();
        String __ret = __obj.ricegrowth(inputGrowth, mapArgs, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___landyield(InfRice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        Yield inputyield = null;
        java.util.Map<java.lang.String, java.lang.String> mapArgs;
        inputyield = Yield.__read(__is, inputyield);
        mapArgs = DirArgsHelper.read(__is);
        __inS.endReadParams();
        String __ret = __obj.landyield(inputyield, mapArgs, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___landdrought(InfRice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        Drought inputdrought = null;
        java.util.Map<java.lang.String, java.lang.String> mapArgs;
        inputdrought = Drought.__read(__is, inputdrought);
        mapArgs = DirArgsHelper.read(__is);
        __inS.endReadParams();
        String __ret = __obj.landdrought(inputdrought, mapArgs, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "PreProcessing",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "landdrought",
        "landyield",
        "maxlikehood",
        "ricegrowth",
        "split"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___PreProcessing(this, in, __current);
            }
            case 1:
            {
                return ___ice_id(this, in, __current);
            }
            case 2:
            {
                return ___ice_ids(this, in, __current);
            }
            case 3:
            {
                return ___ice_isA(this, in, __current);
            }
            case 4:
            {
                return ___ice_ping(this, in, __current);
            }
            case 5:
            {
                return ___landdrought(this, in, __current);
            }
            case 6:
            {
                return ___landyield(this, in, __current);
            }
            case 7:
            {
                return ___maxlikehood(this, in, __current);
            }
            case 8:
            {
                return ___ricegrowth(this, in, __current);
            }
            case 9:
            {
                return ___split(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
