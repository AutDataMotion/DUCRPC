// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `rice.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package RPCRice;

/**
 * Provides type-specific helper functions.
 **/
public final class InfRicePrxHelper extends Ice.ObjectPrxHelperBase implements InfRicePrx
{
    private static final String __landdrought_name = "landdrought";

    public String landdrought(Drought inputdrought, java.util.Map<java.lang.String, java.lang.String> mapArgs)
    {
        return landdrought(inputdrought, mapArgs, null, false);
    }

    public String landdrought(Drought inputdrought, java.util.Map<java.lang.String, java.lang.String> mapArgs, java.util.Map<String, String> __ctx)
    {
        return landdrought(inputdrought, mapArgs, __ctx, true);
    }

    private String landdrought(Drought inputdrought, java.util.Map<java.lang.String, java.lang.String> mapArgs, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__landdrought_name);
        return end_landdrought(begin_landdrought(inputdrought, mapArgs, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_landdrought(Drought inputdrought, java.util.Map<java.lang.String, java.lang.String> mapArgs)
    {
        return begin_landdrought(inputdrought, mapArgs, null, false, false, null);
    }

    public Ice.AsyncResult begin_landdrought(Drought inputdrought, java.util.Map<java.lang.String, java.lang.String> mapArgs, java.util.Map<String, String> __ctx)
    {
        return begin_landdrought(inputdrought, mapArgs, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_landdrought(Drought inputdrought, java.util.Map<java.lang.String, java.lang.String> mapArgs, Ice.Callback __cb)
    {
        return begin_landdrought(inputdrought, mapArgs, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_landdrought(Drought inputdrought, java.util.Map<java.lang.String, java.lang.String> mapArgs, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_landdrought(inputdrought, mapArgs, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_landdrought(Drought inputdrought, java.util.Map<java.lang.String, java.lang.String> mapArgs, Callback_InfRice_landdrought __cb)
    {
        return begin_landdrought(inputdrought, mapArgs, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_landdrought(Drought inputdrought, java.util.Map<java.lang.String, java.lang.String> mapArgs, java.util.Map<String, String> __ctx, Callback_InfRice_landdrought __cb)
    {
        return begin_landdrought(inputdrought, mapArgs, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_landdrought(Drought inputdrought, 
                                             java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                             IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_landdrought(inputdrought, mapArgs, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_landdrought(Drought inputdrought, 
                                             java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                             IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_landdrought(inputdrought, mapArgs, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_landdrought(Drought inputdrought, 
                                             java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_landdrought(inputdrought, mapArgs, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_landdrought(Drought inputdrought, 
                                             java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_landdrought(inputdrought, mapArgs, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_landdrought(Drought inputdrought, 
                                              java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_landdrought(inputdrought, mapArgs, __ctx, __explicitCtx, __synchronous, 
                                 new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                     {
                                         public final void __completed(Ice.AsyncResult __result)
                                         {
                                             InfRicePrxHelper.__landdrought_completed(this, __result);
                                         }
                                     });
    }

    private Ice.AsyncResult begin_landdrought(Drought inputdrought, 
                                              java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__landdrought_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__landdrought_name, __cb);
        try
        {
            __result.prepare(__landdrought_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            Drought.__write(__os, inputdrought);
            DirArgsHelper.write(__os, mapArgs);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_landdrought(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __landdrought_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __landdrought_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        RPCRice.InfRicePrx __proxy = (RPCRice.InfRicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_landdrought(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __landyield_name = "landyield";

    public String landyield(Yield inputyield, java.util.Map<java.lang.String, java.lang.String> mapArgs)
    {
        return landyield(inputyield, mapArgs, null, false);
    }

    public String landyield(Yield inputyield, java.util.Map<java.lang.String, java.lang.String> mapArgs, java.util.Map<String, String> __ctx)
    {
        return landyield(inputyield, mapArgs, __ctx, true);
    }

    private String landyield(Yield inputyield, java.util.Map<java.lang.String, java.lang.String> mapArgs, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__landyield_name);
        return end_landyield(begin_landyield(inputyield, mapArgs, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_landyield(Yield inputyield, java.util.Map<java.lang.String, java.lang.String> mapArgs)
    {
        return begin_landyield(inputyield, mapArgs, null, false, false, null);
    }

    public Ice.AsyncResult begin_landyield(Yield inputyield, java.util.Map<java.lang.String, java.lang.String> mapArgs, java.util.Map<String, String> __ctx)
    {
        return begin_landyield(inputyield, mapArgs, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_landyield(Yield inputyield, java.util.Map<java.lang.String, java.lang.String> mapArgs, Ice.Callback __cb)
    {
        return begin_landyield(inputyield, mapArgs, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_landyield(Yield inputyield, java.util.Map<java.lang.String, java.lang.String> mapArgs, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_landyield(inputyield, mapArgs, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_landyield(Yield inputyield, java.util.Map<java.lang.String, java.lang.String> mapArgs, Callback_InfRice_landyield __cb)
    {
        return begin_landyield(inputyield, mapArgs, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_landyield(Yield inputyield, java.util.Map<java.lang.String, java.lang.String> mapArgs, java.util.Map<String, String> __ctx, Callback_InfRice_landyield __cb)
    {
        return begin_landyield(inputyield, mapArgs, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_landyield(Yield inputyield, 
                                           java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_landyield(inputyield, mapArgs, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_landyield(Yield inputyield, 
                                           java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_landyield(inputyield, mapArgs, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_landyield(Yield inputyield, 
                                           java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_landyield(inputyield, mapArgs, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_landyield(Yield inputyield, 
                                           java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_landyield(inputyield, mapArgs, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_landyield(Yield inputyield, 
                                            java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_landyield(inputyield, mapArgs, __ctx, __explicitCtx, __synchronous, 
                               new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                   {
                                       public final void __completed(Ice.AsyncResult __result)
                                       {
                                           InfRicePrxHelper.__landyield_completed(this, __result);
                                       }
                                   });
    }

    private Ice.AsyncResult begin_landyield(Yield inputyield, 
                                            java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__landyield_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__landyield_name, __cb);
        try
        {
            __result.prepare(__landyield_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            Yield.__write(__os, inputyield);
            DirArgsHelper.write(__os, mapArgs);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_landyield(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __landyield_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __landyield_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        RPCRice.InfRicePrx __proxy = (RPCRice.InfRicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_landyield(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __maxlikehood_name = "maxlikehood";

    public String maxlikehood(Classify inputclass, java.util.Map<java.lang.String, java.lang.String> mapArgs)
    {
        return maxlikehood(inputclass, mapArgs, null, false);
    }

    public String maxlikehood(Classify inputclass, java.util.Map<java.lang.String, java.lang.String> mapArgs, java.util.Map<String, String> __ctx)
    {
        return maxlikehood(inputclass, mapArgs, __ctx, true);
    }

    private String maxlikehood(Classify inputclass, java.util.Map<java.lang.String, java.lang.String> mapArgs, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__maxlikehood_name);
        return end_maxlikehood(begin_maxlikehood(inputclass, mapArgs, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_maxlikehood(Classify inputclass, java.util.Map<java.lang.String, java.lang.String> mapArgs)
    {
        return begin_maxlikehood(inputclass, mapArgs, null, false, false, null);
    }

    public Ice.AsyncResult begin_maxlikehood(Classify inputclass, java.util.Map<java.lang.String, java.lang.String> mapArgs, java.util.Map<String, String> __ctx)
    {
        return begin_maxlikehood(inputclass, mapArgs, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_maxlikehood(Classify inputclass, java.util.Map<java.lang.String, java.lang.String> mapArgs, Ice.Callback __cb)
    {
        return begin_maxlikehood(inputclass, mapArgs, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_maxlikehood(Classify inputclass, java.util.Map<java.lang.String, java.lang.String> mapArgs, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_maxlikehood(inputclass, mapArgs, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_maxlikehood(Classify inputclass, java.util.Map<java.lang.String, java.lang.String> mapArgs, Callback_InfRice_maxlikehood __cb)
    {
        return begin_maxlikehood(inputclass, mapArgs, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_maxlikehood(Classify inputclass, java.util.Map<java.lang.String, java.lang.String> mapArgs, java.util.Map<String, String> __ctx, Callback_InfRice_maxlikehood __cb)
    {
        return begin_maxlikehood(inputclass, mapArgs, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_maxlikehood(Classify inputclass, 
                                             java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                             IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_maxlikehood(inputclass, mapArgs, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_maxlikehood(Classify inputclass, 
                                             java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                             IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_maxlikehood(inputclass, mapArgs, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_maxlikehood(Classify inputclass, 
                                             java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_maxlikehood(inputclass, mapArgs, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_maxlikehood(Classify inputclass, 
                                             java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_maxlikehood(inputclass, mapArgs, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_maxlikehood(Classify inputclass, 
                                              java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_maxlikehood(inputclass, mapArgs, __ctx, __explicitCtx, __synchronous, 
                                 new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                     {
                                         public final void __completed(Ice.AsyncResult __result)
                                         {
                                             InfRicePrxHelper.__maxlikehood_completed(this, __result);
                                         }
                                     });
    }

    private Ice.AsyncResult begin_maxlikehood(Classify inputclass, 
                                              java.util.Map<java.lang.String, java.lang.String> mapArgs, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__maxlikehood_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__maxlikehood_name, __cb);
        try
        {
            __result.prepare(__maxlikehood_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            Classify.__write(__os, inputclass);
            DirArgsHelper.write(__os, mapArgs);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_maxlikehood(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __maxlikehood_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __maxlikehood_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        RPCRice.InfRicePrx __proxy = (RPCRice.InfRicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_maxlikehood(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static InfRicePrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), InfRicePrx.class, InfRicePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static InfRicePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), InfRicePrx.class, InfRicePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static InfRicePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), InfRicePrx.class, InfRicePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static InfRicePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), InfRicePrx.class, InfRicePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static InfRicePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, InfRicePrx.class, InfRicePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static InfRicePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, InfRicePrx.class, InfRicePrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::RPCRice::InfRice"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, InfRicePrx v)
    {
        __os.writeProxy(v);
    }

    public static InfRicePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            InfRicePrxHelper result = new InfRicePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
