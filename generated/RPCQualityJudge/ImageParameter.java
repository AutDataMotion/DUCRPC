// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `qualityjudgeRpc.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package RPCQualityJudge;

public class ImageParameter implements java.lang.Cloneable, java.io.Serializable
{
    public String filePath;

    public String bandIdList;

    public ImageParameter()
    {
        filePath = "";
        bandIdList = "";
    }

    public ImageParameter(String filePath, String bandIdList)
    {
        this.filePath = filePath;
        this.bandIdList = bandIdList;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        ImageParameter _r = null;
        if(rhs instanceof ImageParameter)
        {
            _r = (ImageParameter)rhs;
        }

        if(_r != null)
        {
            if(filePath != _r.filePath)
            {
                if(filePath == null || _r.filePath == null || !filePath.equals(_r.filePath))
                {
                    return false;
                }
            }
            if(bandIdList != _r.bandIdList)
            {
                if(bandIdList == null || _r.bandIdList == null || !bandIdList.equals(_r.bandIdList))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::RPCQualityJudge::ImageParameter");
        __h = IceInternal.HashUtil.hashAdd(__h, filePath);
        __h = IceInternal.HashUtil.hashAdd(__h, bandIdList);
        return __h;
    }

    public ImageParameter
    clone()
    {
        ImageParameter c = null;
        try
        {
            c = (ImageParameter)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(filePath);
        __os.writeString(bandIdList);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        filePath = __is.readString();
        bandIdList = __is.readString();
    }

    static public void
    __write(IceInternal.BasicStream __os, ImageParameter __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public ImageParameter
    __read(IceInternal.BasicStream __is, ImageParameter __v)
    {
        if(__v == null)
        {
             __v = new ImageParameter();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final ImageParameter __nullMarshalValue = new ImageParameter();

    public static final long serialVersionUID = -1225295971L;
}
