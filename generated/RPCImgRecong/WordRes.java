// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `ImageRetrieveRpc.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package RPCImgRecong;

public class WordRes implements java.lang.Cloneable, java.io.Serializable
{
    public int status;

    public ImgInfo[] keyWords;

    public WordRes()
    {
    }

    public WordRes(int status, ImgInfo[] keyWords)
    {
        this.status = status;
        this.keyWords = keyWords;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        WordRes _r = null;
        if(rhs instanceof WordRes)
        {
            _r = (WordRes)rhs;
        }

        if(_r != null)
        {
            if(status != _r.status)
            {
                return false;
            }
            if(!java.util.Arrays.equals(keyWords, _r.keyWords))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::RPCImgRecong::WordRes");
        __h = IceInternal.HashUtil.hashAdd(__h, status);
        __h = IceInternal.HashUtil.hashAdd(__h, keyWords);
        return __h;
    }

    public WordRes
    clone()
    {
        WordRes c = null;
        try
        {
            c = (WordRes)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(status);
        ListStringHelper.write(__os, keyWords);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        status = __is.readInt();
        keyWords = ListStringHelper.read(__is);
    }

    static public void
    __write(IceInternal.BasicStream __os, WordRes __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public WordRes
    __read(IceInternal.BasicStream __is, WordRes __v)
    {
        if(__v == null)
        {
             __v = new WordRes();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final WordRes __nullMarshalValue = new WordRes();

    public static final long serialVersionUID = -5763260711707874641L;
}
